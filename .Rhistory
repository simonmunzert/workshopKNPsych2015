to=links_in_pslinks
)
)
}
names(connections) <- c("from", "to")
head(connections)
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 4) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 4) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
head(connections)
nrow(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
dir.create("figures")
d3SimpleNetwork(connections,
width = 1000,
height = 900,
file="figures/connections.html")
browseURL("figures/connections.html")
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 8) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
dim(connections)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
dim(connections)
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 8) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
dim(connections)
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 10) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
dim(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
dim(connections)
## step 6: visualize connections
dir.create("figures")
d3SimpleNetwork(connections,
width = 1000,
height = 900,
file="figures/connections.html")
browseURL("figures/connections.html")
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
connections
dim(connections)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 30) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
dim(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
## step 6: visualize connections
dir.create("figures")
d3SimpleNetwork(connections,
width = 1000,
height = 900,
file="figures/connections.html")
browseURL("figures/connections.html")
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 50) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3SimpleNetwork(connections,
width = 1000,
height = 900,
file="figures/connections.html")
dim(connections)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 30) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
dim(connections)
?d3ForceNetwork
View(connections)
fix(connections)
unique(connections$from)
unique(connections$to)
connections$to %in% connections$from
connections <- connections[connections$to %in% connections$from,]
dim(connections)
View(connections)
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
unique(connections$from)
unique(connections$to)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 10) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
connections <- connections[connections$to %in% connections$from,]
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
names
connections
sort(unique(connections))
sort(unique(connections$from))
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names[sort(unique(connections$from))]), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
names[sort(unique(connections$from))]
connections
dim(connections)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections <- connections_red
connections$to %in% connections$from
table(connections$to %in% connections$from)
dim(connections)
connections <- connections[connections$to %in% connections$from,]
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
View(names)
names
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names[sort(unique(connections$from))]), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
links_in_pslinks
links
pslinks
links
links_in_pslinks
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
unique(connections$from)
i
nrow(connections[connections$from==i,])
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections_red <- connections_red
dim(connections_red)
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
View(connections_red)
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
dim(connections_red)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
dim(connections_red)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
dim(connections_red)
## step 6: visualize connections
dir.create("figures")
d3SimpleNetwork(connections_red,
width = 1000,
height = 900,
file="figures/connections.html")
browseURL("figures/connections.html")
## step 6: visualize connections
dir.create("figures")
d3SimpleNetwork(connections_red, zoom = T,
width = 1000,
height = 900,
file="figures/connections.html")
browseURL("figures/connections.html")
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
names
head(connections_red)
names_df <- data.frame(id = seq_along(names), name = names)
head(names_df)
names_df <- merge(connections_red, names_df, by.x = "from", by.y = "id")
View(names_df)
d3ForceNetwork(Links = connections_red, Nodes = names_df, NodeID = "name", Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3ForceNetwork(Links = connections_red, Nodes = names_df, NodeID = names_df$name, Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3ForceNetwork(Links = connections_red, Nodes = names_df, Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names_df$name), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections_red, Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
getwd()
setwd("../../")
getwd()
### -------------------------
### Workshop: Web Scraping mit R - Eine kleine Einführung
### Simon Munzert
### Universität Konstanz
### -------------------------
### Vorbereitungen ----------
# Workspace aufräumen
rm(list=ls(all=TRUE))
# Pakete installieren und laden
pkgs <- c("rvest", "jsonlite", "stringr", "httr", "plyr", "ggplot2", "ggmap", "tm", "wordcloud", "RColorBrewer", "wikipediatrend")
# install.packages(pkgs)
lapply(pkgs, library, character.only=T)
# Arbeitspfad speichern
basepath <- getwd()
url <- "http://www.faz.net"
html_parsed <- html(url, encoding = "UTF-8")
css <- 'div:nth-child(2) div .linkable .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
html_parsed <- html(url, encoding = "UTF-8")
html_parsed
css <- 'div:nth-child(2) div .linkable .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
headings_faz <- html_text(headings_faz)
css <- 'div:nth-child(2) div .linkable .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
xpath <- '//div[(((count(preceding-sibling::*) + 1) = 2) and parent::*)]//div//*[contains(concat( " ", @class, " " ), concat( " ", "linkable", " " ))]//*[contains(concat( " ", @class, " " ), concat( " ", "Headline", " " ))]'
headings_faz <- html_nodes(html_parsed, xpath = xpath)
headings_faz
css <- '#FAZContentLeftInner .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
install.packages(c("abind", "AER", "arm", "aRxiv", "beeswarm", "BH", "car", "chron", "classInt", "clue", "coda", "colorspace", "DataCombine", "deldir", "devtools", "digest", "doBy", "dplyr", "effects", "evaluate", "formatR", "Formula", "gam", "gdata", "ggmap", "ggplot2", "ggthemes", "glmnet", "googleVis", "gplots", "gstat", "gtools", "highr", "Hmisc", "httr", "installr", "jsonlite", "knitr", "lfe", "lme4", "lmtest", "lpSolve", "manipulate", "maptools", "markdown", "memisc", "mime", "mnormt", "multcomp", "mvtnorm", "NLP", "ordinal", "pander", "plyr", "polyclip", "polyCub", "proxy", "pscl", "psych", "quantmod", "R2WinBUGS", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "rms", "RMySQL", "ROAuth", "robustbase", "ROCR", "roxygen2", "rstudioapi", "scales", "selectr", "separationplot", "shape", "shiny", "sp", "spacetime", "spatstat", "spdep", "splancs", "stringdist", "stringi", "surveillance", "testthat", "TH.data", "tm", "vcd", "VGAM", "wikipediatrend", "XLConnect", "XML", "zoo"))
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, F, F, F, F, T) # only install R (if there is a newer version), and quits it.
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, F, F, F, F, T) # only install R (if there is a newer version), and quits it.
### -------------------------
### Workshop: Web Scraping mit R - Eine kleine Einführung
### Simon Munzert
### Universität Konstanz
### -------------------------
### Vorbereitungen ----------
# Workspace aufräumen
rm(list=ls(all=TRUE))
# Pakete installieren und laden
pkgs <- c("rvest", "jsonlite", "stringr", "httr", "plyr", "ggplot2", "ggmap", "tm", "wordcloud", "RColorBrewer", "wikipediatrend")
# install.packages(pkgs)
lapply(pkgs, library, character.only=T)
# Arbeitspfad speichern
basepath <- getwd()
### -------------------------
### Workshop: Web Scraping mit R - Eine kleine Einführung
### Simon Munzert
### Universität Konstanz
### -------------------------
### Vorbereitungen ----------
# Workspace aufräumen
rm(list=ls(all=TRUE))
# Pakete installieren und laden
pkgs <- c("rvest", "jsonlite", "stringr", "httr", "plyr", "ggplot2", "ggmap", "tm", "wordcloud", "RColorBrewer", "wikipediatrend")
# install.packages(pkgs)
lapply(pkgs, library, character.only=T)
