file="figures/connections.html")
browseURL("figures/connections.html")
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
names
head(connections_red)
names_df <- data.frame(id = seq_along(names), name = names)
head(names_df)
names_df <- merge(connections_red, names_df, by.x = "from", by.y = "id")
View(names_df)
d3ForceNetwork(Links = connections_red, Nodes = names_df, NodeID = "name", Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3ForceNetwork(Links = connections_red, Nodes = names_df, NodeID = names_df$name, Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3ForceNetwork(Links = connections_red, Nodes = names_df, Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names_df$name), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections_red, Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
getwd()
setwd("../../")
getwd()
### -------------------------
### Workshop: Web Scraping mit R - Eine kleine Einführung
### Simon Munzert
### Universität Konstanz
### -------------------------
### Vorbereitungen ----------
# Workspace aufräumen
rm(list=ls(all=TRUE))
# Pakete installieren und laden
pkgs <- c("rvest", "jsonlite", "stringr", "httr", "plyr", "ggplot2", "ggmap", "tm", "wordcloud", "RColorBrewer", "wikipediatrend")
# install.packages(pkgs)
lapply(pkgs, library, character.only=T)
# Arbeitspfad speichern
basepath <- getwd()
url <- "http://www.faz.net"
html_parsed <- html(url, encoding = "UTF-8")
css <- 'div:nth-child(2) div .linkable .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
html_parsed <- html(url, encoding = "UTF-8")
html_parsed
css <- 'div:nth-child(2) div .linkable .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
headings_faz <- html_text(headings_faz)
css <- 'div:nth-child(2) div .linkable .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
xpath <- '//div[(((count(preceding-sibling::*) + 1) = 2) and parent::*)]//div//*[contains(concat( " ", @class, " " ), concat( " ", "linkable", " " ))]//*[contains(concat( " ", @class, " " ), concat( " ", "Headline", " " ))]'
headings_faz <- html_nodes(html_parsed, xpath = xpath)
headings_faz
css <- '#FAZContentLeftInner .Headline'
headings_faz <- html_nodes(html_parsed, css = css)
install.packages(c("abind", "AER", "arm", "aRxiv", "beeswarm", "BH", "car", "chron", "classInt", "clue", "coda", "colorspace", "DataCombine", "deldir", "devtools", "digest", "doBy", "dplyr", "effects", "evaluate", "formatR", "Formula", "gam", "gdata", "ggmap", "ggplot2", "ggthemes", "glmnet", "googleVis", "gplots", "gstat", "gtools", "highr", "Hmisc", "httr", "installr", "jsonlite", "knitr", "lfe", "lme4", "lmtest", "lpSolve", "manipulate", "maptools", "markdown", "memisc", "mime", "mnormt", "multcomp", "mvtnorm", "NLP", "ordinal", "pander", "plyr", "polyclip", "polyCub", "proxy", "pscl", "psych", "quantmod", "R2WinBUGS", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "rms", "RMySQL", "ROAuth", "robustbase", "ROCR", "roxygen2", "rstudioapi", "scales", "selectr", "separationplot", "shape", "shiny", "sp", "spacetime", "spatstat", "spdep", "splancs", "stringdist", "stringi", "surveillance", "testthat", "TH.data", "tm", "vcd", "VGAM", "wikipediatrend", "XLConnect", "XML", "zoo"))
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, F, F, F, F, T) # only install R (if there is a newer version), and quits it.
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, F, F, F, F, T) # only install R (if there is a newer version), and quits it.
### -------------------------
### Workshop: Web Scraping mit R - Eine kleine Einführung
### Simon Munzert
### Universität Konstanz
### -------------------------
### Vorbereitungen ----------
# Workspace aufräumen
rm(list=ls(all=TRUE))
# Pakete installieren und laden
pkgs <- c("rvest", "jsonlite", "stringr", "httr", "plyr", "ggplot2", "ggmap", "tm", "wordcloud", "RColorBrewer", "wikipediatrend")
# install.packages(pkgs)
lapply(pkgs, library, character.only=T)
# Arbeitspfad speichern
basepath <- getwd()
### -------------------------
### Workshop: Web Scraping mit R - Eine kleine Einführung
### Simon Munzert
### Universität Konstanz
### -------------------------
### Vorbereitungen ----------
# Workspace aufräumen
rm(list=ls(all=TRUE))
# Pakete installieren und laden
pkgs <- c("rvest", "jsonlite", "stringr", "httr", "plyr", "ggplot2", "ggmap", "tm", "wordcloud", "RColorBrewer", "wikipediatrend")
# install.packages(pkgs)
lapply(pkgs, library, character.only=T)
### -----------------------------
### political scientists on Wikipedia
### simon munzert
### -----------------------------
## goals ------------------------
#  build a ‘collaboration’ network of psychologists
## tasks ------------------------
# gather list of psychologists
# fetch Wikipedia entries
# identify links
# construct connectivity matrix
# visualize network
## packages ---------------------
library(stringr) # string processing
library(rvest) # scraping suite
library(d3Network) # visualizing networks
## directory --------------------
wd <- ("./data/wikipediaPsychologists")
setwd(wd)
## code -------------------------
## step 1: inspect page
url <- "https://en.wikipedia.org/wiki/List_of_psychologists"
browseURL(url)
## step 2: retrieve links
html <- html(url)
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Ali_ibn_Abbas_al-Majusi")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "Karen_Wynn")] &
str_detect(links, "/wiki/")
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
##  step 3: extract names
names <- html_attr(anchors, "title")[links_index]
names <- str_replace(names, " \\(.*\\)", "")
names <- iconv(names, "utf8", "latin1")
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- html(fname)
}
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
dim(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
dim(connections)
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names[sort(unique(connections$from))]), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
names
names_red <-  names[sort(unique(connections_red$from))]
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
names_red <-  names[sort(unique(connections_red$from))]
names_red
length(unique(connections_red$from)
)
length(unique(connections_red$to))
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
length(unique(connections_red$from))
length(unique(connections_red$to))
names_red <-  names[sort(unique(connections_red$from))]
names_red
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
## step 6: visualize connections_red
dir.create("figures")
d3SimpleNetwork(connections_red, zoom = T,
width = 1000,
height = 900,
file="figures/connections_red.html")
browseURL("figures/connections_red.html")
library(d3Network) # visualizing networks
d3SimpleNetwork(connections_red,
width = 1000,
height = 900,
file="figures/connections_red.html")
browseURL("figures/connections_red.html")
?d3SimpleNetwork
d3SimpleNetwork(connections_red,
width = 1000,
height = 900, linkDistance = 100,
file="figures/connections_red.html")
browseURL("figures/connections_red.html")
?d3ForceNetwork
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names_red), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names_red), Source = "from", Target = "to", opacity = 0.9, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
connections_red
dim(connections_red)
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
names_red <-  names[sort(unique(connections_red$from))]
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
dim(connections_red)
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
dim(connections_red)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
dim()
dim(connections_red)
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
names_red <-  names[sort(unique(connections_red$from))]
dim(connections_red)
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names_red), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
connections_red
head(connections_red)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
names_red <-  names[sort(unique(connections_red$from))]
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names_red), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
dim(connections_red)
fix(connections_red)
connections_red$from2 <- sapply(as.character(connections_red$from), function(x) which(x == names_red))-1
connections_red$to2 <- sapply(as.character(connections_red$to), function(x) {
i <- which(x == names_red)
if (length(i)) i else NA
}) -1
names_red
as.character(connections_red$from)
connections_red$from2 <- sapply(as.character(connections_red$from), function(x) which(x == names_red))
connections_red$to2 <- sapply(as.character(connections_red$to), function(x) {
i <- which(x == names_red)
if (length(i)) i else NA
}) -1
connections_red$from2
jjnames<-c("A","B","C","D","E","F","G","H")
mygroup<-c(1,1,1,2,2,2,2,2)
JJNodes<-data.frame( name=jjnames, group=mygroup )
jjsources<-c( 0 , 4 )
jjtargets<-c(  1,  5 )
jjvalues<-rep( c(1,2) , length(jjtargets) ) ; jjvalues<-jjvalues[1:length(jjtargets)]
JJLinks<-data.frame(source=jjsources,target=jjtargets,value=jjvalues)
JJLinks
JJNodes
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400, zoom=TRUE,
opacity = 0.9)`
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400, zoom=TRUE,
opacity = 0.9)
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400, zoom=TRUE,
opacity = 0.9, "figures/test.html")
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, "figures/test.html")
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width =  850, height = 400, zoom=TRUE,
opacity = 0.9, "figures/test.html")
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width =  850, height = 400, zoom=TRUE,
opacity = 0.9, "figures/test.html", fontsize =8)
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width =  850, height = 400, zoom=TRUE,
opacity = 0.9, file = "figures/test.html", fontsize =8)
browseURL('figures/test.html')
JJLinks
JJNodes
d3ForceNetwork(Links = JJLinks, Nodes = JJNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name", width =  850, height = 400, zoom=TRUE,
opacity = 0.9, file = "figures/test.html", fontsize =8)
browseURL('figures/test.html')
connections_red
head(connections_red)
names_red
data.frame(name = names)
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
connections_red
dim(connections_red)
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
connections_red
dim(connections_red)
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
# reduce network for displaying purposes
connections_red <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections_red <- subset(connections_red, connections_red$from != i)
}
}
connections_red <- connections_red[connections_red$to %in% connections_red$from,]
# make symmetrical
connections_red <- rbind(
connections_red,
data.frame(from=connections_red$to,
to=connections_red$from)
)
ns_red.html")
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
names
d3ForceNetwork(Links = connections_red, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_red_names.html")
browseURL('figures/connections_red_names.html')
## step 5: identify links between psychologists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
dim(connections)
head(connections)
# reduce network for displaying purposes
connections <- connections
for (i in unique(connections$from)) {
num_links <- nrow(connections[connections$from==i,])
if(num_links < 20) {
connections <- subset(connections, connections$from != i)
}
}
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 100, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 300, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0.9, zoom = T, width = 1200, height = 800, linkDistance = 500, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 0, zoom = T, width = 1200, height = 800, linkDistance = 400, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 1, zoom = T, width = 1200, height = 800, linkDistance = 400, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 1, charge = 0, zoom = T, width = 1200, height = 800, linkDistance = 400, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from", Target = "to", opacity = 1, charge = -50, zoom = T, width = 1200, height = 800, linkDistance = 400, file = "figures/connections_names.html")
browseURL('figures/connections_names.html')
